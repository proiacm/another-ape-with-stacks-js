{"version":3,"file":"connect-react.umd.production.min.js","sources":["../src/react/components/connect/context.tsx","../src/react/components/connect/index.tsx","../src/react/hooks/use-connect.ts"],"sourcesContent":["import React, { useReducer, createContext } from 'react';\nimport { AuthOptions, FinishedAuthData } from '@stacks/connect';\nimport { UserSession } from '@stacks/auth';\n\nenum States {\n  UPDATE_AUTH_OPTIONS = 'data/update-auth-options',\n}\n\ntype Action = { type: string; payload?: any };\n\ntype Dispatch = (action: Action) => void;\n\ntype State = {\n  isOpen: boolean;\n  isAuthenticating: boolean;\n  authData?: FinishedAuthData;\n  authOptions: AuthOptions;\n  userSession?: UserSession;\n};\n\nconst initialState: State = {\n  isOpen: false,\n  isAuthenticating: false,\n  authData: undefined,\n  userSession: undefined,\n  authOptions: {\n    redirectTo: '',\n    manifestPath: '',\n    onFinish: () => null,\n    authOrigin: undefined,\n    sendToSignIn: false,\n    appDetails: {\n      name: '',\n      icon: '',\n    },\n  },\n};\n\nconst connectReducer = (state: State, { type, payload }: { type: string; payload?: any }) => {\n  switch (type) {\n    case States.UPDATE_AUTH_OPTIONS: {\n      return {\n        ...state,\n        authOptions: {\n          ...state.authOptions,\n          ...payload,\n        },\n      };\n    }\n\n    default: {\n      throw new Error(`Unhandled action type: ${type}`);\n    }\n  }\n};\n\nconst ConnectContext = createContext<State>(initialState);\n\nconst ConnectDispatchContext = createContext<Dispatch | undefined>(undefined);\n\nconst ConnectProvider = ({\n  authOptions,\n  children,\n}: {\n  authOptions: AuthOptions;\n  children: any;\n}) => {\n  const [state, dispatch] = useReducer(connectReducer, initialState);\n\n  return (\n    <ConnectContext.Provider value={{ ...state, authOptions }}>\n      <ConnectDispatchContext.Provider value={dispatch}>{children}</ConnectDispatchContext.Provider>\n    </ConnectContext.Provider>\n  );\n};\n\nexport {\n  initialState,\n  connectReducer,\n  ConnectContext,\n  ConnectDispatchContext,\n  ConnectProvider,\n  States,\n};\n","import React from 'react';\nimport { ConnectProvider } from './context';\nimport { AuthOptions } from '@stacks/connect';\n\n/**\n * Usage\n *\n *\n * const auth = {\n      manifestPath: '/static/manifest.json',\n      redirectTo: '/',\n      finished: ({userSession}) => {\n        doFinishSignIn();\n      },\n      authOrigin,\n      appDetails: {\n        name: 'Wink',\n        icon: 'url'\n      }\n    }\n *\n * <Connect authOptions={authOptions} />\n */\nconst Connect = ({ authOptions, children }: { authOptions: AuthOptions; children: any }) => {\n  return <ConnectProvider authOptions={authOptions}>{children}</ConnectProvider>;\n};\n\nexport { Connect };\n","import { useContext } from 'react';\nimport {\n  authenticate,\n  AuthOptions,\n  ContractCallOptions,\n  ContractDeployOptions,\n  STXTransferOptions,\n  openContractCall,\n  openContractDeploy,\n  openSTXTransfer,\n  showBlockstackConnect,\n  ContractCallRegularOptions,\n  ContractCallSponsoredOptions,\n  ContractDeployRegularOptions,\n  ContractDeploySponsoredOptions,\n  STXTransferRegularOptions,\n  STXTransferSponsoredOptions,\n  FinishedAuthData,\n  openStructuredDataSignatureRequestPopup,\n  openSignatureRequestPopup,\n} from '@stacks/connect';\nimport { ConnectContext, ConnectDispatchContext, States } from '../components/connect/context';\nimport { SignatureRequestOptions } from '@stacks/connect';\nimport { StructuredDataSignatureRequestOptions } from '@stacks/connect/src/types/structuredDataSignature';\n\nconst useConnectDispatch = () => {\n  const dispatch = useContext(ConnectDispatchContext);\n  if (!dispatch) {\n    throw new Error('This must be used within the ConnectProvider component.');\n  }\n  return dispatch;\n};\n\nexport const useConnect = () => {\n  const { isOpen, isAuthenticating, authData, authOptions, userSession } =\n    useContext(ConnectContext);\n\n  const dispatch = useConnectDispatch();\n\n  const doUpdateAuthOptions = (payload: Partial<AuthOptions>) => {\n    return dispatch({ type: States.UPDATE_AUTH_OPTIONS, payload });\n  };\n\n  /**\n   *\n   * @param signIn Whether the user should be sent to sign in\n   * @param options\n   */\n  const doOpenAuth = (signIn?: boolean, options?: Partial<AuthOptions>) => {\n    if (signIn) {\n      const _options: AuthOptions = {\n        ...authOptions,\n        ...options,\n        onFinish: (payload: FinishedAuthData) => {\n          authOptions.onFinish?.(payload);\n        },\n        sendToSignIn: true,\n      };\n      void authenticate(_options);\n      return;\n    } else {\n      showBlockstackConnect({\n        ...authOptions,\n        sendToSignIn: false,\n      });\n    }\n    authOptions && doUpdateAuthOptions(authOptions);\n  };\n\n  const doAuth = (options: Partial<AuthOptions> = {}) => {\n    void authenticate({\n      ...authOptions,\n      ...options,\n      onFinish: (payload: FinishedAuthData) => {\n        authOptions.onFinish?.(payload);\n      },\n    });\n  };\n\n  function doContractCall(options: ContractCallRegularOptions): Promise<void>;\n  function doContractCall(options: ContractCallSponsoredOptions): Promise<void>;\n  function doContractCall(options: ContractCallOptions): Promise<void>;\n  function doContractCall(options: ContractCallOptions) {\n    return openContractCall({\n      ...options,\n      authOrigin: authOptions.authOrigin,\n      appDetails: authOptions.appDetails,\n    });\n  }\n\n  function doContractDeploy(options: ContractDeployRegularOptions): Promise<void>;\n  function doContractDeploy(options: ContractDeploySponsoredOptions): Promise<void>;\n  function doContractDeploy(options: ContractDeployOptions): Promise<void>;\n  function doContractDeploy(options: ContractDeployOptions) {\n    return openContractDeploy({\n      ...options,\n      authOrigin: authOptions.authOrigin,\n      appDetails: authOptions.appDetails,\n    });\n  }\n\n  function doSTXTransfer(options: STXTransferRegularOptions): Promise<void>;\n  function doSTXTransfer(options: STXTransferSponsoredOptions): Promise<void>;\n  function doSTXTransfer(options: STXTransferOptions): Promise<void>;\n  function doSTXTransfer(options: STXTransferOptions) {\n    return openSTXTransfer({\n      ...options,\n      authOrigin: authOptions.authOrigin,\n      appDetails: authOptions.appDetails,\n    });\n  }\n\n  function sign(options: SignatureRequestOptions) {\n    return openSignatureRequestPopup({\n      ...options,\n      authOrigin: authOptions.authOrigin,\n      appDetails: authOptions.appDetails,\n    });\n  }\n\n  function signStructuredData(options: StructuredDataSignatureRequestOptions) {\n    return openStructuredDataSignatureRequestPopup({\n      ...options,\n      authOrigin: authOptions.authOrigin,\n      appDetails: authOptions.appDetails,\n    });\n  }\n\n  return {\n    isOpen,\n    isAuthenticating,\n    authData,\n    authOptions,\n    userSession,\n    doOpenAuth,\n    doAuth,\n    authenticate,\n    doContractCall,\n    doContractDeploy,\n    doSTXTransfer,\n    sign,\n    signStructuredData,\n  };\n};\n"],"names":["States","initialState","isOpen","isAuthenticating","authData","userSession","authOptions","redirectTo","manifestPath","onFinish","authOrigin","sendToSignIn","appDetails","name","icon","connectReducer","state","type","payload","UPDATE_AUTH_OPTIONS","Error","ConnectContext","createContext","ConnectDispatchContext","ConnectProvider","children","useReducer","dispatch","Provider","value","useContext","useConnectDispatch","doOpenAuth","signIn","options","_options","authenticate","doAuth","doContractCall","openContractCall","doContractDeploy","openContractDeploy","doSTXTransfer","openSTXTransfer","sign","openSignatureRequestPopup","signStructuredData","openStructuredDataSignatureRequestPopup"],"mappings":"sTAIKA,8OAAAA,+BACmB,2BAexB,IAAMC,EAAsB,CAC1BC,QAAQ,EACRC,kBAAkB,EAClBC,cAAU,EACVC,iBAAa,EACbC,YAAa,CACXC,WAAY,GACZC,aAAc,GACdC,SAAU,kBAAM,MAChBC,gBAAY,EACZC,cAAc,EACdC,WAAY,CACVC,KAAM,GACNC,KAAM,MAKNC,EAAiB,SAACC,SAAgBC,IAAAA,KAAMC,IAAAA,eACpCD,QACDjB,EAAOmB,gCAELH,GACHV,iBACKU,EAAMV,YACNY,mBAMD,IAAIE,gCAAgCH,KAK1CI,EAAiBC,gBAAqBrB,GAEtCsB,EAAyBD,qBAAoC,GAE7DE,EAAkB,gBACtBlB,IAAAA,YACAmB,IAAAA,WAK0BC,aAAWX,EAAgBd,GAAvC0B,8BAGXN,EAAeO,SAAhB,CAAyBC,iBAAmBvB,YAAAA,qBACzCiB,EAAuBK,SAAxB,CAAiCC,MAAOF,GAAWF,4IChDzC,mCACND,EAAD,CAAiBlB,cADPA,eAAamB,wBCUN,iBAEtBK,aAAWT,GADLnB,IAAAA,OAAQC,IAAAA,iBAAkBC,IAAAA,SAAUE,IAAAA,YAAaD,IAAAA,YAGnDsB,EAZmB,eACnBA,EAAWG,aAAWP,OACvBI,QACG,IAAIP,MAAM,kEAEXO,EAOUI,SA2FV,CACL7B,OAAAA,EACAC,iBAAAA,EACAC,SAAAA,EACAE,YAAAA,EACAD,YAAAA,EACA2B,WAtFiB,SAACC,EAAkBC,MAChCD,OACIE,OACD7B,EACA4B,GACHzB,SAAU,SAACS,qBACGT,gCAAWS,IAEzBP,cAAc,IAEXyB,eAAaD,qCAIb7B,GACHK,cAAc,QAvBXgB,EAAS,CAAEV,KAAMjB,EAAOmB,oBAAqBD,QA0BjBZ,KAqEnC+B,OAlEa,SAACH,YAAAA,IAAAA,EAAgC,IACzCE,oBACA9B,EACA4B,GACHzB,SAAU,SAACS,qBACGT,gCAAWS,QA8D3BkB,aAAAA,eACAE,wBAvDsBJ,UACfK,wBACFL,GACHxB,WAAYJ,EAAYI,WACxBE,WAAYN,EAAYM,eAoD1B4B,0BA7CwBN,UACjBO,0BACFP,GACHxB,WAAYJ,EAAYI,WACxBE,WAAYN,EAAYM,eA0C1B8B,uBAnCqBR,UACdS,uBACFT,GACHxB,WAAYJ,EAAYI,WACxBE,WAAYN,EAAYM,eAgC1BgC,cA5BYV,UACLW,iCACFX,GACHxB,WAAYJ,EAAYI,WACxBE,WAAYN,EAAYM,eAyB1BkC,4BArB0BZ,UACnBa,+CACFb,GACHxB,WAAYJ,EAAYI,WACxBE,WAAYN,EAAYM"}