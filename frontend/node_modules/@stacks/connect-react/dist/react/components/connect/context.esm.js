import React, { createContext, useReducer } from 'react';
import { extends as _extends } from '../../../_virtual/_rollupPluginBabelHelpers.js';

var States;

(function (States2) {
  States2["UPDATE_AUTH_OPTIONS"] = "data/update-auth-options";
})(States || (States = {}));

var initialState = {
  isOpen: false,
  isAuthenticating: false,
  authData: void 0,
  userSession: void 0,
  authOptions: {
    redirectTo: "",
    manifestPath: "",
    onFinish: function onFinish() {
      return null;
    },
    authOrigin: void 0,
    sendToSignIn: false,
    appDetails: {
      name: "",
      icon: ""
    }
  }
};

var connectReducer = function connectReducer(state, _ref) {
  var type = _ref.type,
      payload = _ref.payload;

  switch (type) {
    case States.UPDATE_AUTH_OPTIONS:
      {
        return _extends({}, state, {
          authOptions: _extends({}, state.authOptions, payload)
        });
      }

    default:
      {
        throw new Error("Unhandled action type: " + type);
      }
  }
};

var ConnectContext = /*#__PURE__*/createContext(initialState);
var ConnectDispatchContext = /*#__PURE__*/createContext(void 0);

var ConnectProvider = function ConnectProvider(_ref2) {
  var authOptions = _ref2.authOptions,
      children = _ref2.children;

  var _useReducer = useReducer(connectReducer, initialState),
      state = _useReducer[0],
      dispatch = _useReducer[1];

  return /* @__PURE__ */React.createElement(ConnectContext.Provider, {
    value: _extends({}, state, {
      authOptions: authOptions
    })
  }, /* @__PURE__ */React.createElement(ConnectDispatchContext.Provider, {
    value: dispatch
  }, children));
};

export { ConnectContext, ConnectDispatchContext, ConnectProvider, States, connectReducer, initialState };
//# sourceMappingURL=context.esm.js.map
