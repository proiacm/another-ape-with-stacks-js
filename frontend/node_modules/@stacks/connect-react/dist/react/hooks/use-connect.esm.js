import { useContext } from 'react';
import { extends as _extends } from '../../_virtual/_rollupPluginBabelHelpers.js';
import { ConnectContext, ConnectDispatchContext, States } from '../components/connect/context.esm.js';
import { authenticate, showBlockstackConnect, openContractCall, openContractDeploy, openSTXTransfer, openSignatureRequestPopup, openStructuredDataSignatureRequestPopup } from '@stacks/connect';

var useConnectDispatch = function useConnectDispatch() {
  var dispatch = useContext(ConnectDispatchContext);

  if (!dispatch) {
    throw new Error("This must be used within the ConnectProvider component.");
  }

  return dispatch;
};

var useConnect = function useConnect() {
  var _useContext = useContext(ConnectContext),
      isOpen = _useContext.isOpen,
      isAuthenticating = _useContext.isAuthenticating,
      authData = _useContext.authData,
      authOptions = _useContext.authOptions,
      userSession = _useContext.userSession;

  var dispatch = useConnectDispatch();

  var doUpdateAuthOptions = function doUpdateAuthOptions(payload) {
    return dispatch({
      type: States.UPDATE_AUTH_OPTIONS,
      payload: payload
    });
  };

  var doOpenAuth = function doOpenAuth(signIn, options) {
    if (signIn) {
      var _options = _extends({}, authOptions, options, {
        onFinish: function onFinish(payload) {
          var _authOptions$onFinish;

          (_authOptions$onFinish = authOptions.onFinish) === null || _authOptions$onFinish === void 0 ? void 0 : _authOptions$onFinish.call(authOptions, payload);
        },
        sendToSignIn: true
      });

      void authenticate(_options);
      return;
    } else {
      showBlockstackConnect(_extends({}, authOptions, {
        sendToSignIn: false
      }));
    }

    authOptions && doUpdateAuthOptions(authOptions);
  };

  var doAuth = function doAuth(options) {
    if (options === void 0) {
      options = {};
    }

    void authenticate(_extends({}, authOptions, options, {
      onFinish: function onFinish(payload) {
        var _authOptions$onFinish2;

        (_authOptions$onFinish2 = authOptions.onFinish) === null || _authOptions$onFinish2 === void 0 ? void 0 : _authOptions$onFinish2.call(authOptions, payload);
      }
    }));
  };

  function doContractCall(options) {
    return openContractCall(_extends({}, options, {
      authOrigin: authOptions.authOrigin,
      appDetails: authOptions.appDetails
    }));
  }

  function doContractDeploy(options) {
    return openContractDeploy(_extends({}, options, {
      authOrigin: authOptions.authOrigin,
      appDetails: authOptions.appDetails
    }));
  }

  function doSTXTransfer(options) {
    return openSTXTransfer(_extends({}, options, {
      authOrigin: authOptions.authOrigin,
      appDetails: authOptions.appDetails
    }));
  }

  function sign(options) {
    return openSignatureRequestPopup(_extends({}, options, {
      authOrigin: authOptions.authOrigin,
      appDetails: authOptions.appDetails
    }));
  }

  function signStructuredData(options) {
    return openStructuredDataSignatureRequestPopup(_extends({}, options, {
      authOrigin: authOptions.authOrigin,
      appDetails: authOptions.appDetails
    }));
  }

  return {
    isOpen: isOpen,
    isAuthenticating: isAuthenticating,
    authData: authData,
    authOptions: authOptions,
    userSession: userSession,
    doOpenAuth: doOpenAuth,
    doAuth: doAuth,
    authenticate: authenticate,
    doContractCall: doContractCall,
    doContractDeploy: doContractDeploy,
    doSTXTransfer: doSTXTransfer,
    sign: sign,
    signStructuredData: signStructuredData
  };
};

export { useConnect };
//# sourceMappingURL=use-connect.esm.js.map
