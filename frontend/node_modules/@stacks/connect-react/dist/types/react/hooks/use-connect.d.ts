import { AuthOptions, ContractCallOptions, ContractDeployOptions, STXTransferOptions, ContractCallRegularOptions, ContractCallSponsoredOptions, ContractDeployRegularOptions, ContractDeploySponsoredOptions, STXTransferRegularOptions, STXTransferSponsoredOptions, FinishedAuthData } from '@stacks/connect';
import { SignatureRequestOptions } from '@stacks/connect';
import { StructuredDataSignatureRequestOptions } from '@stacks/connect/src/types/structuredDataSignature';
export declare const useConnect: () => {
    isOpen: boolean;
    isAuthenticating: boolean;
    authData: FinishedAuthData | undefined;
    authOptions: AuthOptions;
    userSession: import("@stacks/connect").UserSession | undefined;
    doOpenAuth: (signIn?: boolean | undefined, options?: Partial<AuthOptions> | undefined) => void;
    doAuth: (options?: Partial<AuthOptions>) => void;
    authenticate: (authOptions: AuthOptions) => Promise<void>;
    doContractCall: {
        (options: ContractCallRegularOptions): Promise<void>;
        (options: ContractCallSponsoredOptions): Promise<void>;
        (options: ContractCallOptions): Promise<void>;
    };
    doContractDeploy: {
        (options: ContractDeployRegularOptions): Promise<void>;
        (options: ContractDeploySponsoredOptions): Promise<void>;
        (options: ContractDeployOptions): Promise<void>;
    };
    doSTXTransfer: {
        (options: STXTransferRegularOptions): Promise<void>;
        (options: STXTransferSponsoredOptions): Promise<void>;
        (options: STXTransferOptions): Promise<void>;
    };
    sign: (options: SignatureRequestOptions) => Promise<void>;
    signStructuredData: (options: StructuredDataSignatureRequestOptions) => Promise<void>;
};
